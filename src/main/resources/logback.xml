<?xml version="1.0" encoding="UTF-8"?>
<!--配置  scan为true，配置文件发生改变，自动加载  scanPeriod扫描配置文件的时间间隔一分钟不需要每做一次配置重新启动服务器了  debug设置为true就会打印logback的内部信息-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--定义参数常量（全局变量）,供下面调用-->
    <property name = "log.level" value = "debug"/>
    <property name="log.maxHistory" value="30"/>
    <property name="log.filePath" value="${catalina.base}"/>
    <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS}[%thread]%-5level%logger{50}-%msg%n"/>
    <!--控制台设置-->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>
    <!--将信息分成三个级别输出到不同的三个文件中-->
    <!--DEBUG-->
    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log.filePath}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\
        <!--文件名称-->
            <fileNamePattern>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
        <!--文件最大保存历史数量，只保留最近三十天的日志-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!--即将文件信息转换成字符串，又将字符串存储到文件信息-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--设置在文件中只保留DEBUG相关的信息-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>


    <!--INFO-->
    <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log.filePath}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\
            <!--文件名称-->
            <fileNamePattern>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--文件最大保存历史数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!--即将文件信息转换成字符串，又将log.pattern事先定义好的格式输出到文件-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--设置在文件中只保留INFO相关的信息-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--ERROR-->
    <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log.filePath}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\
            <!--文件名称-->
            <fileNamePattern>${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--文件最大保存历史数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!--即将文件信息转换成字符串，又将字符串存储到文件信息-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--设置在文件中只保留ERROR相关的信息-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!--将appender和logger绑定在一起，logger监听的是com.imooc下面产生的日志信息，addtivity:是否向上级logger传递打印信息，默认为true加上这个配置后，logger会向root传递它收集
    好的信息，这里由于root是在控制台打印，所以控制台会打印logger里面输出的信息-->
    <logger name="com.imooc" level="${log.level}" additivity="true">
        <appender-ref ref="debugAppender"/>
        <appender-ref ref="infoAppender"/>
        <appender-ref ref="errorAppender"/>
    </logger>
    <!--root是所有<logger>的父级-->
    <root level="info">
        <appender-ref ref="consoleAppender"/>
    </root>
</configuration>